Pasted-Nice-I-ll-write-a-single-copy-ready-Product-Requirements-Document-PRD-designed-so-someone--1759783710873_1759783710873.txt
Nice — I’ll write a single, copy-ready **Product Requirements Document (PRD)** designed so someone (or Replit’s AI + a dev) can pick it up and implement the MVP in a Replit workspace with minimal back-and-forth. It contains exactly what to run, how to configure the Replit environment, the DB schema, endpoints, acceptance criteria, milestones, and QA checks. You can paste this into your Replit project README, hand it to a contractor, or give it to Replit’s AutoDev tools.

---

# Family Command Center — MVP PRD (Replit-ready)

## 1 — Project summary (one liner)

A glanceable, sync-first **Family Command Center** that unifies Google Calendars, ingests school messages, and provides realtime shared lists & chores for families (school-age kids 5–12). Built as a Next.js app deployed on Replit with Supabase backend.

---

## 2 — Key objectives (MVP)

1. Import parent Google Calendar events (one-way → app) and display a visual family calendar.
2. Real-time shared grocery lists and chores with assignment and completion.
3. School Hub: ingest forwarded school emails into a single family message feed.
4. Simple family onboarding & tenant isolation (families scoped by `family_id`).
5. Stripe test billing for Premium unlock.

Success metric for MVP: pilot families report reduced coordination friction and at least 50% of pilot users perform Calendar connect + add a list item within first session.

---

## 3 — Non-goals (MVP scope limits)

* No full two-way calendar sync back to Google (app → Google) in MVP (optional later).
* No child-facing logins under 13 (avoid COPPA complexity).
* Limited integrations beyond Google Calendar and inbound email (ClassDojo/Remind later).

---

## 4 — Target users

* Parents (moms & dads) of school-age children (5–12), primarily U.S. but globally applicable.
* Early adopters: PTA members, parents active in school groups, time-starved dual-income families.

---

## 5 — Core user stories (MUST have)

1. **Calendar import**

   * As a parent, I can connect my Google Calendar so my family’s events appear in the app.
   * Acceptance: OAuth flow completes, `calendar_connections` row created, next 30 days of events appear in `events` table.

2. **Visual family dashboard**

   * As a parent, I can open a dashboard and instantly see today’s events colored by family member.
   * Acceptance: Dashboard shows member color, owner, and next 3 events.

3. **Shared grocery list**

   * As a parent, I can add an item to a grocery list and my partner sees it in realtime.
   * Acceptance: Item added by Parent A appears in Parent B’s UI <1s.

4. **Chore assignment & completion**

   * As a parent, I can assign chores to a family member and view completion history.
   * Acceptance: Repeating chore can be assigned; completion logs to `chore_completions`.

5. **School Hub ingest**

   * As a parent, I can forward school emails to a unique family email and see messages in the School Hub feed.
   * Acceptance: Inbound webhook stores message record in `messages`.

6. **Billing (test)**

   * As a parent, I can start a checkout session to subscribe (Stripe test), and subscription updates user billing status in DB.
   * Acceptance: Stripe Checkout session created and webhook updates DB.

---

## 6 — Functional requirements (brief)

* **Auth**: Supabase Auth (email/password + optional social).
* **DB**: Supabase Postgres; Row Level Security by `family_id`.
* **Realtime**: Supabase Realtime or Channels for lists & chores.
* **Calendar**: Google OAuth for `https://www.googleapis.com/auth/calendar` (store refresh token server-side).
* **Email ingest**: Mailgun/Postmark inbound forwarding to `/api/mail/inbound`.
* **Payments**: Stripe checkout & webhook.
* **UI**: Next.js App Router + React, Tailwind CSS.

---

## 7 — Data model (core tables — run SQL script below in Supabase SQL Editor)

*(Copy/paste into Supabase SQL Editor)*

```sql
-- families
create table families (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  created_at timestamptz default now()
);

-- users: map to supabase auth user id
create table users (
  id uuid primary key references auth.users(id) on delete cascade,
  full_name text,
  email text,
  avatar_url text,
  family_id uuid references families(id) on delete cascade,
  role text default 'parent',
  created_at timestamptz default now()
);

-- family_members (children + adults as personas)
create table family_members (
  id uuid primary key default gen_random_uuid(),
  family_id uuid references families(id) on delete cascade,
  name text not null,
  role text,
  birth_year int,
  avatar_url text,
  created_at timestamptz default now()
);

-- calendar connections
create table calendar_connections (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references users(id) on delete cascade,
  google_account_email text,
  access_token text,
  re...